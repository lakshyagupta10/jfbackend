<?php

namespace App\Http\Controllers\Api;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use DB;

class NearbystoreController extends Controller
{
    public function checkstorelocation(Request $request)
    {
        $lat=$request->lat;
        $lng=$request->lng;
        $vendor=$request->vendor_id;
        $c=$this->checklocation($lat,$lng,$vendor);
        return array("c"=>$c);
    }
     public function checklocation($lat,$lng,$vendor)
 {
    $vendor2=DB::table('vendor')
    ->where('vendor_id',$vendor)
    ->first();
     $latlng=json_decode($vendor2->latlngarray);
     if($vendor2->latlngarray=='N/A')
     {
         return 0;
     }
        foreach($latlng as $latlngs)
        {
            $vertices_x[] = $latlngs->lat;
            $vertices_y[] = $latlngs->lng;
        }
        $points_polygon = count($vertices_x) - 1;  
        $longitude_x = $lat; 
        $latitude_y = $lng;  

          $i = $j = $c = 0;
          for ($i = 0, $j = $points_polygon ; $i < $points_polygon; $j = $i++) {
            if ( (($vertices_y[$i]  >  $latitude_y != ($vertices_y[$j] > $latitude_y)) &&
             ($longitude_x < ($vertices_x[$j] - $vertices_x[$i]) * ($latitude_y - $vertices_y[$i]) / ($vertices_y[$j] - $vertices_y[$i]) + $vertices_x[$i]) ) )
              $c = !$c;
          }
          return $c;
 }
    function GetDrivingDistance(Request $request)
{
    $lat1=$request->lat1;
    $lat2=$request->lat2;
    $long1=$request->long1;
    $long2=$request->long2;
    
    $url = "https://maps.googleapis.com/maps/api/distancematrix/json?origins=".$lat1.",".$long1."&destinations=".$lat2.",".$long2."&mode=driving&language=en-EN&key=AIzaSyCRQIhsGS3xrGeopcSPW70zal2yNRIQAJc";
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_PROXYPORT, 3128);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    $response = curl_exec($ch);
    curl_close($ch);
    $response_a = json_decode($response, true);
    // $dist = $response_a['rows']['0']['elements']['0']['distance']['text'];
    // $time = $response_a['rows']['0']['elements']['0']['duration']['text'];
     $dist = $response_a;
     $time = $response_a;

    return array('distance' => $dist, 'time' => $time);
}
    public function nearbystore(Request $request)
    {
       
    	$lat = $request->lat;
    	$lng = $request->lng;
    	$vendor_category_id = $request->vendor_category_id;


        $groupApp = DB::table("vendor")
    	 ->select("vendor.vendor_name","vendor.vendor_phone","vendor.vendor_id","vendor.vendor_logo","vendor.vendor_category_id","vendor.lat","vendor.lng","vendor.delivery_range","vendor.online_status","vendor.about","vendor.vendor_loc"
        ,DB::raw("6371 * acos(cos(radians(".$lat . ")) 
        * cos(radians(lat)) 
        * cos(radians(lng) - radians(" . $lng . ")) 
        + sin(radians(" .$lat. ")) 
        * sin(radians(lat))) AS distance"))
        ->orderBy('distance')
        ->where('vendor_category_id',$vendor_category_id)
        ->get();
         $storelist = NULL;
        
        foreach($groupApp as $store)
        {
            if($store->delivery_range > $store->distance){
		$store->inrange=1; 
		$store->duration = strtr(((int)$store->distance/30)*60);
                $storelist[] = $store; 
            }
	    else{
		$store->inrange=0;
		$store->duration = ((int)$store->distance/30)*60;
                $storelist[] = $store; 

		}
        }
    if ($storelist != NULL){
            $message = array('status'=>'1', 'message'=>'NearBy Store', 'data'=>$storelist);
            return $message;
           
        }
        else{
             $message = array('status'=>'0', 'message'=>'We are Coming Soon in your area', 'data'=>[]);
            return $message;

        }
    }
    
    public function nearbyrest(Request $request)
    {
       
    	$lat = $request->lat;
    	$lng = $request->lng;


        $groupApp = DB::table("vendor")
     	 ->select("vendor.vendor_name","vendor.vendor_phone","vendor.vendor_id","vendor.vendor_logo","vendor.vendor_category_id","vendor.lat","vendor.lng","vendor.delivery_range","vendor.online_status","vendor.about","vendor.vendor_loc",'vendor.packaging_charges'
        ,DB::raw("6371 * acos(cos(radians(".$lat . ")) 
        * cos(radians(lat)) 
        * cos(radians(lng) - radians(" . $lng . ")) 
        + sin(radians(" .$lat. ")) 
        * sin(radians(lat))) AS distance"))
        ->where('ui_type',2)
        ->orderBy('distance')
        ->get();
        $storelist = NULL;
        foreach($groupApp as $store)
        {
            if($store->delivery_range > $store->distance){
		$store->inrange=1;
                $storelist[] = $store; 
            }
		else{
                $store->inrange=0;
                $storelist[] = $store; 
		}
        }
    if ($storelist != NULL){
            $message = array('status'=>'1', 'message'=>'NearBy Restaurant', 'data'=>$storelist);
            return $message;
           
        }
        else{
             $message = array('status'=>'0', 'message'=>'We are Coming Soon in your area', 'data'=>[]);
            return $message;

        }
    }


    
}
    
